
@model List<AHP.Models.CriterionView>
@{
    ViewBag.Title = "EditCriterion";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


            <h1 id="SubTitle">Edit criteria</h1>
            <h3 class="text-light font-italic">Input your preferences</h3>

<div class="container justify-content-md-center rounded shadow text-center text-dark p-3 pt-5 bg-white">
    @using (Html.BeginForm("EditCriterionPreference", "Criterion", FormMethod.Post, new { id = "EditCriterionForm" }))
    {
        @Html.AntiForgeryToken()
        @*<div class="row p-2">
                <div class="col-3 text-center">criteria 1</div>
                <div class="col-6"><input id="slider1" type="range" min="-8" max="9" step="1"></div>
                <div class="col-3 text-center">criteria 2</div>
            </div>*@
    }
    <div id="EditCriterionForm"></div>
</div>
<!-- LOADER -->
<div class="loader" id="divLoader" style="display:none;"></div>

@section scripts {
    <script>

        // CREATING FORM ROW
        let criteriaLen =  @Model.Count;
        let Criteria = [];

         var uploadedList = @Html.Raw(Json.Encode(@Model));

        for (let criteria of uploadedList) {
            Criteria.push({ name: criteria.CriteriaName, id: criteria.CriteriaId })
        }

        // console.log(Criteria);

        let form = document.getElementById('EditCriterionForm');
        $(document).ready(function () {
            let a = Criteria.length;
            let idCount = 0;
            for (var i = 0; i < a; i++) {
                for (var j = i + 1; j < a; j++) {
                   // console.log(idCount);
                    let formRow1 = document.createElement("div");
                        formRow1.classList.add("row", "pt-4");
                        formRow1.setAttribute("class", "text-center");
                    let desc = document.createElement("p");
                        desc.classList.add("lead");
                        desc.setAttribute("id", idCount * 2);
                        desc.setAttribute("style","font-size:15px; letter-spacing:1px; font-style: italic;")
                        desc.innerHTML = "Equally prefered";
                    formRow1.appendChild(desc);

                    let formRow2 = document.createElement("div");
                        formRow2.classList.add("row");

                    let firstCriterion = document.createElement("div");
                        firstCriterion.classList.add("col-3", "text-center");
                        firstCriterion.setAttribute("style", "font-size:20px; font-weight: bold;");
                    firstCriterion.setAttribute("id", `first` + idCount);
                    firstCriterion.innerHTML = Criteria[i].name;
                    formRow2.appendChild(firstCriterion);

                    let slider = document.createElement("div");
                        slider.classList.add("col-6");

                    let sliderInput = document.createElement("input");
                        sliderInput.setAttribute("type", "range");
                        sliderInput.setAttribute("min", -8);
                        sliderInput.setAttribute("max", 8);
                        sliderInput.setAttribute("step", 1);
                        sliderInput.setAttribute("Value", 0);
                        sliderInput.setAttribute("id", idCount);
                        slider.appendChild(sliderInput);
                    formRow2.appendChild(slider);

                    let secondCriterion = document.createElement("div");
                        secondCriterion.classList.add("col-3", "text-center");
                        secondCriterion.setAttribute("style", "font-size:20px; font-weight: bold;");
                        secondCriterion.setAttribute("id", `second` + idCount);
                        secondCriterion.innerHTML = Criteria[j].name;
                    formRow2.appendChild(secondCriterion);

                    form.append(formRow1);
                    form.append(formRow2);

                    let line = document.createElement("hr");
                        form.append(line);
                    idCount++;
                }
            }

            let btn = document.createElement("button");
            btn.classList.add("btn", "btn-success", "btn-lg", "mt-3", "btnLetter");
            btn.setAttribute("type", "submit");
            btn.innerHTML = "Submit";
            form.append(btn);

            $('input[type=range]').on("click", () => {
                let id = parseInt(event.target.id);
                let descId = (id * 2).toString();
                let desc = document.getElementById(descId);

                let firstId = `first` + id;
                let first = document.getElementById(firstId).innerHTML;

                let secondId = `second` + id;
                let second = document.getElementById(secondId).innerHTML;

                switch(parseInt(event.target.value)) {
                        case -8:
                        case -7:
                            desc.innerHTML = first + ` extremely more important than ` + second;
                        break;
                        case -6:
                        case -5:
                            desc.innerHTML = first + ` very strongly more important than ` + second;
                        break;
                        case -4:
                        case -3:
                            desc.innerHTML = first + ` strongly more important than ` + second;
                        break;
                        case -2:
                        case -1:
                            desc.innerHTML = first + ` moderately more important than ` + second;
                        break;
                        case 0:
                            desc.innerHTML = first + ` equally prefered to ` + second;
                        break;
                        case 2:
                        case 1:
                            desc.innerHTML = second + ` moderately more important than ` + first;
                        break;
                        case 4:
                        case 3:
                            desc.innerHTML = second + ` strongly more important than ` + first;
                        break;
                        case 6:
                        case 5:
                            desc.innerHTML = second + ` very strongly more important than ` + first;
                        break;
                        case 8:
                        case 7:
                            desc.innerHTML = second + ` extremely more important than ` + first;
                        break;
                      default:
                        desc.innerHTML = first + ` equally prefered to ` + second;
                    }

            });
        });

        // FORM SUBMIT
         $("#EditCriterionForm").on("submit", function () {
             event.preventDefault();
             var url = '@Url.Action("EditCriterionPreference", "Criterion")';
             var data = [];

         // Find all input fields
             var input = $('#EditCriterionForm').find('input[type=range]');
             let tempData = [];
             for (let t of input) {
                    // Values of each input field
                    let x = parseInt(t.value);
                    let y = (x > 0) ? (1 / (x+1)) : (-x+1);
                    tempData.push(y);
             }
             for (var i = 0; i < Criteria.length; i++) {
                 // Get Criteria1Id for a certain i
                 for (var j = i + 1; j < Criteria.length; j++) {
                     data.push({
                         CriteriaId: Criteria[i].id,
                         Priority: tempData[i + j - 1],
                         Column: j+1
                     })
                 }
             }

         //console.log(JSON.stringify(data));

            $.ajax({
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            type: 'POST',
            url: url,
            data: JSON.stringify(data),
            beforeSend: function () {
                $("#divLoader").show("slow");
                $('.container').css("filter", "blur(1px)");
                },
            success: function (response) {
                console.log(response);
                $("#divLoader").hide("slow");
                window.location.href = '@Url.Action("AddAlternative", "Alternative", new { id = @ViewBag.id })'
            },
            failure: function (response) {
                alert(response);
            }
         });

        });


    </script>

}
